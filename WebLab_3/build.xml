<?xml version="1.0" encoding="UTF-8"?>
<project name="webapp" default="build">
    <property file="build.properties"/>

    <!--    указываем путь до Анта-->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- Путь к дополнительным джарникам -->
    <path id="classpath.source">
        <fileset dir="${lib}" includes="*.jar"/>
    </path>

    <!--    компиляция исходных кодов проекта-->
    <target name="compile">
        <mkdir dir="${compiled.classes}"/>
        <javac srcdir="${main}" destdir="${compiled.classes}" encoding="UTF-8">
            <classpath>
                <path refid="classpath.source"/>
                <pathelement location="${compiled.classes}"/>
            </classpath>
        </javac>
        <copy todir="${compiled.classes}">
            <fileset dir="${meta-inf}"/>
        </copy>
        <mkdir dir="${compiled.tests}"/>
        <javac srcdir="${test}" destdir="${compiled.tests}">
            <classpath>
                <path refid="classpath.source"/>
                <pathelement location="${compiled.classes}"/>
            </classpath>
        </javac>
    </target>

    <!--    компиляция исходных кодов проекта и их упаковка в исполняемый jar-архив-->
    <target name="build" depends="compile">
        <delete file="${file.jar}"/>
        <mkdir dir="${webapp}"/>
        <copy todir="${webapp}">
            <fileset dir="${web}"/>
        </copy>
        <mkdir dir="${webInf.classes}"/>
        <copy todir="${webInf.classes}">
            <fileset dir="${compiled.classes}"/>
        </copy>
        <mkdir dir="${webInf.lib}"/>
        <copy todir="${webInf.lib}">
            <fileset dir="${lib}"/>
        </copy>
        <jar destfile="${file.jar}" basedir="${webapp}">
            <manifest>
                <attribute name="Version" value="${version}"/>
                <attribute name="Author" value="Ivan and Svyatoslav"/>
                <attribute name="Manage-Bean" value="PointsBean"/>
                <!--  <attribute name="Main-Class" value="${main-class}"/>-->
            </manifest>
        </jar>
        <war destfile="${file.war}" basedir="${webapp}">
            <manifest>
                <attribute name="Version" value="${version}"/>
                <attribute name="Author" value="Ivan and Svyatoslav"/>
                <attribute name="Manage-Bean" value="PointsBean"/>
            </manifest>
        </war>
    </target>


    <!-- проверка на наличие скомпилированных классов проекта и всех временных файлов -->
    <target name="check-condition">
        <available file="${target}" type="dir" property="check.status"/>
    </target>

    <!-- удаление скомпилированных классов проекта и всех временных файлов (если они есть)-->
    <target name="clean" depends="check-condition">
        <if>
            <equals arg1="${check.status}" arg2="true"/>
            <then>
                <delete dir="${target}"/>
            </then>
        </if>
    </target>

    <!--запуск junit-тестов проекта-->
    <target name="test" depends="build">
        <mkdir dir="${reports}"/>
        <echo message="--- TEST DONE ---"/>
        <junit fork="true" printsummary="on">
            <formatter type="xml"/>
            <classpath>
                <path refid="classpath.source"/>
                <pathelement location="${compiled.classes}"/>
                <pathelement location="${compiled.tests}"/>
            </classpath>
            <batchtest todir="reports">
                <fileset dir="${test2}" includes="*.java"/>
            </batchtest>
        </junit>
    </target>

    <!-- преобразование native2ascii для копий файлов локализации -->
    <target name="native2ascii">
        <native2ascii encoding="${localization.encoding}" src="${localization.files.path}"
                      dest="${ascii_locale}/resources" ext=".properties" includes="*resources*.*"/>
        <mkdir dir="${ascii_locale}"/>
        <copy todir="${ascii_locale}">
            <fileset dir="${ascii_locale}"/>
        </copy>
    </target>

    <!-- если проект не удаётся скомпилировать (цель compile), загружается предыдущая версия из репозитория git -->
    <target name="history">
        <exec executable="git" outputproperty="commits.count">
            <arg value="rev-list"/>
            <arg value="--count"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="current.commit">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="current.work_diff">
            <arg value="diff"/>
            <arg value="HEAD"/>
        </exec>

        <if>
            <length string="${current.work_diff}" length="0" trim="true" when="greater"/>
            <then>
                <exec executable="git" >
                    <arg value="add"/>
                    <arg value="."/>
                </exec>
                <exec executable="git" >
                    <arg value="commit"/>
                    <arg value="-m"/>
                    <arg value="New commit"/>
                </exec>
            </then>
            <else>
                <echo>No changes in files. Nothing to commit</echo>
            </else>
        </if>

        <trycatch>
            <try>
                <for param="i" begin="1" end="${commits.count}">
                    <sequential>
                        <trycatch>
                            <try>
                                <antcall target="compile"/>
                                <property name="breakProperty" value="true"/>
                            </try>
                            <catch>
                                <var name="previous.commit" unset="true"/>
                                <exec executable="git" outputproperty="previous.commit">
                                    <arg value="rev-parse"/>
                                    <arg value="HEAD"/>
                                </exec>
                                <echo>Error in compile target</echo>
                                <exec executable="git">
                                    <arg value="reset"/>
                                    <arg value="--hard"/>
                                    <arg value="HEAD~1"/>
                                </exec>
                            </catch>
                            <!-->Если компиляция прошла успешна, выходим с цикла<-->
                            <finally>
                                <fail if="breakProperty"/>
                            </finally>
                        </trycatch>
                    </sequential>
                </for>
            </try>
            <!-->Ловим ошибку при успешной компиляции<-->
            <catch>
                <echo>Finally</echo>
            </catch>
            <finally>
                <if>
                    <isset property="previous.commit"/>
                    <then>
                        <exec executable="git">
                            <arg value="diff"/>
                            <arg value="${previous.commit}"/>
                            <redirector output="diff.txt"/>
                        </exec>
                    </then>
                </if>
                <echo>Original commit: ${current.commit}</echo>
            </finally>
        </trycatch>
    </target>


</project>
